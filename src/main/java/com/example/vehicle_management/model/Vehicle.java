package com.example.vehicle_management.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType; // From Lombok: auto-generates getters, setters, toString, equals, hashCode
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity // Specifies that this class is a JPA entity (maps to a database table)
@Table(name = "vehicles") // Specifies the database table name
@Data // Lombok annotation to generate boilerplate code (getters, setters, etc.)
@NoArgsConstructor // Lombok: generates a no-argument constructor
@AllArgsConstructor // Lombok: generates a constructor with all arguments
public class Vehicle {

    @Id // Marks this field as the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the way the ID is generated (auto-increment by database)
    private Long id;

    @NotBlank(message = "Vehicle name is required") // Validation: ensures the field is not null and not empty
    @Size(min = 2, max = 100, message = "Vehicle name must be between 2 and 100 characters")
    @Column(nullable = false) // JPA: corresponding database column cannot be null
    private String name;

    @NotBlank(message = "Fuel type is required")
    @Column(name = "fuel_type", nullable = false)
    private String fuelType;

    @NotBlank(message = "Registration number is required")
    @Column(name = "registration_no", nullable = false, unique = true) // Ensures registration number is unique in the database
    private String registrationNo;

    @NotBlank(message = "Owner name is required")
    @Column(name = "owner_name", nullable = false)
    private String ownerName;

    @NotBlank(message = "Owner address is required")
    @Column(name = "owner_address", nullable = false)
    private String ownerAddress;

    @NotBlank(message = "City is required")
    @Column(nullable = false)
    private String city;

    @NotBlank(message = "State is required")
    @Column(nullable = false)
    private String state;

    // Constructors, Getters, and Setters are automatically generated by Lombok's @Data, @NoArgsConstructor, @AllArgsConstructor.
    // If you are not using Lombok, you would need to write them manually.
}
